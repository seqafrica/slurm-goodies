#!/bin/bash
#
#  sbatch-list - Slurm array submission made easier
#  Copyright (C) 2024  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: https://github.com/seqafrica/slurm-goodies

# 'Hardened bash'
export LC_ALL="C"
set -euo pipefail

PROGNAME="${0##*/}"

# Boilerplate

err_exit() { echo "${0##*/}: $*" >&2; exit 1; }

usage_exit() {
    printf '
Usage: %s [SBATCH_OPTS] LISTFILE|"-" EXECUTABLE

  Submits a Slurm job array, passing each line from LISTFILE as the command
  line arguments to a parallel instance of EXECUTABLE.

  Empty lines and comments in LISTFILE are ignored.  LISTFILE can be "-" to
  indicate standard input. This enables for instance:
  
      ls -Q * | %s - myjob.sh   # The -Q option quotes filenames

  Lines from LISTFILE are interpreted by bash when passed as arguments to
  EXECUTABLE, hence use quoting just like you would on a command-line.

  SBATCH_OPTS are passed as options to sbatch(1).  You can also pass these
  using "#SBATCH" directives in EXECUTABLE, as with sbatch jobs.

' "$PROGNAME" "$PROGNAME"
    exit ${1:-1}
}

# Parse options

declare -a SBATCH_OPTS=()
while (( $# > 2 )); do
    case $1 in
        -h|--help)  usage_exit 0 ;;
        *)          SBATCH_OPTS[${#SBATCH_OPTS[@]}]="$1" ;;
    esac
    shift
done

# Parse arguments

(( $# == 2 )) || usage_exit

LISTFILE="$1"
[[ "$LISTFILE" == '-' || -f "$LISTFILE" ]] || err_exit "no such file: $LISTFILE"

EXE="$2"
# Apply same rules as sbatch: look up script in PWD first, then PATH
[[ "${EXE##*/}" != "$EXE" || ! -f "$EXE" ]] || EXE="./$EXE"
[[ -n "$(type -p "$EXE")" ]] || err_exit "not an executable: $EXE"

# Do the work

# The way we implement this all is to generate a script that we feed to sbatch,
# in which we put:
#
#  - Any #SBATCH directives the user has put in EXECUTABLE (if it's a script)
#  - A bash array that holds the contents of LISTFILE (yes, this may get big,
#    but since we may be reading from stdin we need to store these somewhere,
#    eiher in a tempfile we can't clean up, or else in the ephemeral script).
#  - Code to pick the appropriate line from that array for this task
#  - The call to EXECUTABLE with the argument line picked above
#
# Furthermore, we pass on to sbatch the SBATCH_OPTS from the command-line and
# (obviously, as this is what this was all about) the --array specification.

# Copy LISTFILE to temporary file, while shell-escaping every line
TMP_LIST="$(mktemp)"
grep -Ev '^[[:space:]]*(#|$)' "$LISTFILE" | while read -r LINE; do
    printf '%q\n' "$LINE"
done >"$TMP_LIST"

# Count the number of lines (= array size)
N_LINES="$(fgrep -c '' "$TMP_LIST")"

# Generate the batch job and pipe it into sbatch
{
  printf '#!/bin/bash
'
  # Copy the SBATCH directives from user's script
  grep -E '^#SBATCH ' "$EXE" 2>/dev/null || true

  # Generate the input array variable
  printf 'declare -a ARGS_LIST=(\n'
  cat "$TMP_LIST"; rm -f "$TMP_LIST"
  printf ')\n'

  # Generate the call
  printf 'exec bash -c "%s ${ARGS_LIST[$((SLURM_ARRAY_TASK_ID - 1))]}"\n' "$EXE" "${EXE##*/}"

} | # Pipe into sbatch with user options and add array spec
exec sbatch "${SBATCH_OPTS[@]}" --array 1-$N_LINES

#!/bin/bash
#
#  sbatch-tsv - Slurm job array submission made easier
#  Copyright (C) 2024  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: https://github.com/seqafrica/slurm-goodies

# 'Hardened bash'
export LC_ALL="C"
set -euo pipefail

declare -r PROGNAME="${0##*/}"

# Boilerplate

err_exit() { echo "${0##*/}: error: $*" >&2; exit 1; }

usage_exit() {
    printf '
Usage: %s [SBATCH_OPTS] TSV_FILE SCRIPT

  Submit a Slurm job array that runs SCRIPT for each record in TSV_FILE.

  Each instance of SCRIPT receives its record from TSV_FILE as a set of
  environment variables whose names are the column headers in TSV_FILE,
  prefixed by an underscore.

  TSV_FILE must be tab-separated and have column headers.  Empty lines
  and lines starting with '"'"'#'"'"' are ignored.  Column headers must contain
  only letters, digits, and underscores.  Headers are case sensitive.

  SBATCH_OPTS are passed as options to sbatch(1) and override any #SBATCH
  directives that may be set in SCRIPT.

  Lookup rules for SCRIPT are the same as for sbatch.  Notably: if SCRIPT
  has no directory path, then it PWD is searched before PATH.

' "$PROGNAME"
    exit ${1:-1}
}

# Parse options

declare -a SBATCH_OPTS=()
while (($# > 2)); do
    case "$1" in
        -h|--help)  usage_exit 0 ;;
        *)          SBATCH_OPTS+=("$1") ;;
    esac
    shift
done

# Parse arguments

(($# == 2)) || usage_exit

TSV_FILE="$1"
[[ -f "$TSV_FILE" ]] || err_exit "no such file: $TSV_FILE"

EXE="$2"
# Apply same rules as sbatch: look up script in PWD first, then PATH
[[ "${EXE##*/}" != "$EXE" || ! -f "$EXE" ]] || EXE="./$EXE"
[[ -n "$(type -p "$EXE")" ]] || err_exit "not an executable: $EXE"

# Count the number of lines in TSV_FILE ex header (= array size)
declare -ri N_LINES=$(($(grep -Ev '^[[:space:]]*(#|$)' "$TSV_FILE" | wc -l) - 1))
((N_LINES >= 1)) || err_exit "no data lines in TSV file: $TSV_FILE"

# Check TSV column header validity, and all rows have same number of columns
OPT_ERR=$(grep -Ev '^[[:space:]]*(#|$)' "$TSV_FILE" | awk -F '\t' '
    NR == 1 {
      for (i=1; i<=NF; ++i) if ($i !~ /^[[:alnum:]_]+$/) {
        print "invalid column header (must contain only letters, digits, underscores): " $i
        exit
      }
      NCOL = NF
    }
    NF != NCOL {
      print "invalid TSV file: record " (NR-1) " has " NF " columns, expected " NCOL
      exit
    }')
[[ -z "$OPT_ERR" ]] || err_exit "$OPT_ERR"

# Generate the batch job and pipe it into sbatch
{
  printf '#!/bin/bash
'
  # Copy the SBATCH directives from user's script
  grep -E '^#SBATCH ' "$EXE" 2>/dev/null || true

  # When executed, the statement below sources the generated list of variable exports,
  # (export _NAME='val' ...), one for each column NAME for row R, where R is the index
  # of this task in the array, as given by $SLURM_ARRAY_TASK_ID.
  # The "Q gensub(Q,QQ,$i) Q" is there to quote $i while double-quoting its contents,
  # substituting each ' by '"'"' (see: https://stackoverflow.com/a/1250279/2109137).
  cat <<'EOF'
. <(grep -Ev '^[[:space:]]*(#|$)' "$TSV_FILE" |
    awk -F '\t' -v R=$((SLURM_ARRAY_TASK_ID + 1)) -v Q="'" -v QQ="'\"'\"'" '
      NR==1 { for (i=1; i<=NF; ++i) H[i]=$i }
      NR==R { for (i=1; i<=NF; ++i) print "export _" H[i] "=" Q gensub(Q,QQ,"g",$i) Q }')
EOF

  # Generate the call
  printf 'exec %s\n' "$EXE"

} | # Pipe into sbatch with user options and add array spec
exec sbatch "${SBATCH_OPTS[@]}" --array 1-$N_LINES
